{
  "hash": "8ab533e9e20dcd71f4730d845934b20c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Demonstrating the Use of PDEs in Chemical Engineering with Python\nauthor: Siju SWamy\ndate: '2024-07-21'\ncategories:\n  - news\n  - code\n  - analysis\nimage: image.jpg\nexecute:\n  echo: false\n---\n\n# Demonstrating the Use of PDEs in Chemical Engineering with Python\n\nPartial Differential Equations (PDEs) are essential in modeling various phenomena in Chemical Engineering. They describe how processes evolve over time and space, such as heat conduction, diffusion, and reaction kinetics. In this blog, we will demonstrate how to use PDEs to model a common problem in chemical engineering: heat conduction in a one-dimensional rod. We'll use Python to solve the PDE and visualize the results.\n\n## Problem Statement: Heat Conduction in a Rod\n\nHeat conduction in a one-dimensional rod can be modeled using the heat equation, a type of PDE. The heat equation describes how temperature changes over time and space in the rod.\n\n### The Heat Equation\n\nThe heat equation is given by:\n\n$$\\frac{\\partial T(x, t)}{\\partial t} = \\alpha \\frac{\\partial^2 T(x, t)}{\\partial x^2}$$\n\nwhere:\n- $T(x, t)$  is the temperature at position $x $  and time $t$ ,\n- $\\alpha$  is the thermal diffusivity of the rod.\n\n### Boundary and Initial Conditions\n\nTo solve the heat equation, we need to specify boundary and initial conditions:\n\n- **Initial Condition:** The initial temperature distribution in the rod.\n- **Boundary Conditions:** The temperature at the ends of the rod (can be fixed or insulated).\n\n## Python Code for Solving the Heat Equation\n\nWe will use Python's numerical libraries to solve the heat equation. The method we will use is the Finite Difference Method (FDM), which approximates the PDE by discretizing the spatial and temporal domains.\n\n### Step 1: Import Required Libraries\n\n::: {#7c84dee3 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.animation import FuncAnimation\n# Parameters\nL = 10.0       # Length of the rod\nT_max = 2.0    # Maximum time\nNx = 50        # Number of spatial points\nNt = 100       # Number of time steps\nalpha = 0.01   # Thermal diffusivity\n\n# Discretization\ndx = L / (Nx - 1)\ndt = T_max / Nt\nx = np.linspace(0, L, Nx)\nu = np.zeros((Nx, Nt + 1))\n\n# Initial Condition\nu[:, 0] = np.sin(np.pi * x / L)\n\n# Boundary Conditions\nu[0, :] = 0\nu[-1, :] = 0\nfor n in range(0, Nt):\n    for i in range(1, Nx - 1):\n        u[i, n + 1] = u[i, n] + alpha * dt / dx**2 * (u[i + 1, n] - 2 * u[i, n] + u[i - 1, n])\nfig, ax = plt.subplots()\nline, = ax.plot(x, u[:, 0], label='t=0')\nax.set_xlim(0, L)\nax.set_ylim(-1, 1)\nax.set_xlabel('Position (x)')\nax.set_ylabel('Temperature (T)')\nax.set_title('Heat Conduction in a Rod')\nax.legend()\n\ndef update(n):\n    line.set_ydata(u[:, n])\n    ax.set_title(f'Heat Conduction in a Rod (t={n * dt:.2f}s)')\n    return line,\n\nani = FuncAnimation(fig, update, frames=range(0, Nt, int(Nt / 10)), blit=True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){width=617 height=449}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}